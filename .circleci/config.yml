version: 2.1
jobs:
  build_and_test:
    parameters:
      compiler:
        description: C++ compiler to build with
        type: string
      standard:
        description: C++ standard to build with
        type: string
      mode:
        description: mode to build and test with
        type: string
      with_dpdk:
        default: "disable-dpdk"
        description: build with DPDK enabled
        type: enum
        enum: ["disable-dpdk", "enable-dpdk"]
      with_modules:
        default: "disable-modules"
        description: build with C++20 modules enabled
        type: enum
        enum: ["disable-modules", "enable-modules"]
    machine:
      image:  ubuntu-2204:2023.04.2
    resource_class: large
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - run: echo 'docker run --pids-limit -1 --security-opt seccomp=unconfined --network host --user "$(id -u):$(id -g)" --rm -v $PWD:$PWD -w $PWD  docker.io/scylladb/seastar-toolchain:2023-12-28 "$@"' > run; chmod +x run
      - when:
          condition:
            equal: [ "enable-dpdk", << parameters.with_dpdk >> ]
          steps:
            - run: ./run ./configure.py --compiler << parameters.compiler >> --c++-standard << parameters.standard >> --cook dpdk --enable-dpdk
      - when:
          condition:
            equal: [ "enable-modules", << parameters.with_modules >> ]
          steps:
            - run: ./run ./configure.py --compiler << parameters.compiler >> --c++-standard << parameters.standard >> --enable-cxx-modules
      - when:
          condition:
            and:
              - equal: [ "disable-dpdk", << parameters.with_dpdk >> ]
              - equal: [ "disable-modules", << parameters.with_modules >> ]
          steps:
            - run: ./run ./configure.py --compiler << parameters.compiler >> --c++-standard << parameters.standard >>
      - when:
          condition:
            equal: [ dev, << parameters.mode >> ]
          steps:
            - run: ./run ninja -C build/<< parameters.mode >> checkheaders
      - when:
          condition:
            equal: [ "enable-modules", << parameters.with_modules >> ]
          steps:
            - run: ./run ninja -C build/<< parameters.mode >> hello_cxx_module
      - when:
          condition:
            equal: [ "disable-modules", << parameters.with_modules >> ]
          steps:
            - run: ./run ninja -C build/<< parameters.mode >>
            - run: ./run ./test.py --mode=<< parameters.mode >>

workflows:
  version: 2
  build_and_test:
    jobs:
      - build_and_test:
          matrix:
            parameters:
              compiler: ["clang++-18", "g++-13"]
              standard: ["20", "23"]
              mode: ["dev", "debug", "release"]
      # only build this combination with dpdk enabled, so we don't double
      # the size of the test matrix, and can at least test the build with
      # dpdk enabled.
      - build_and_test:
          matrix:
            parameters:
              compiler: ["clang++-18"]
              standard: ["23"]
              mode: ["release"]
              with_dpdk: [ "enable-dpdk" ]
      # only build this combination with C++20 moduels enabled, so we don't double
      # the size of the test matrix, and can at least test the build with
      # C++20 modules enabled.
      - build_and_test:
          matrix:
            parameters:
              compiler: ["clang++-18"]
              standard: ["23"]
              mode: ["debug"]
              with_modules: [ "enable-modules" ]
